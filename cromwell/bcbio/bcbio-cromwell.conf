
include required(classpath("application"))

system {
  workflow-restart = true
}
call-caching {
  enabled = true
}
load-control {
  # Avoid watching memory, since the load-controller stops jobs on local runs
  memory-threshold-in-mb = 1
}

cwltool-runner {
  # Use external cwltool to avoid slow runtimes with java embedded pre-processing
  class = "cwl.CwltoolProcess"
}


database {
  profile = "slick.jdbc.HsqldbProfile$"
  db {
    driver = "org.hsqldb.jdbcDriver"
    url = "jdbc:hsqldb:file:/g/data3/gx8/projects/Diakumis/cromwell/test_bcbio_cromwell/cromwell_work/persist/metadata;shutdown=false;hsqldb.tx=mvcc"
    connectionTimeout = 200000
  }
}




backend {
  providers {
    Local {
      config {
        
        runtime-attributes = """
        Int? cpu
        Int? memory_mb
        
        Int? cpuMin
        Int? cpuMax
        Int? memoryMin
        Int? memoryMax
        String? outDirMin
        String? outDirMax
        String? tmpDirMin
        String? tmpDirMax
        """
        submit-docker: ""
             filesystems {

        local {
          localization: ["soft-link"]
          caching {
            duplication-strategy: ["soft-link"]
            hashing-strategy: "path"
          }
        }
      }

      }
    }

    PBSPRO {
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"
      config {
        
        runtime-attributes = """
        Int cpu = 1
        Int memory_mb = 2048
        String queue = "normal"
        String account = ""
        String walltime = "48:00:00"
        
        Int? cpuMin
        Int? cpuMax
        Int? memoryMin
        Int? memoryMax
        String? outDirMin
        String? outDirMax
        String? tmpDirMin
        String? tmpDirMax
        """
        submit = """
        qsub -V -l wd -N ${job_name} -o ${out} -e ${err} -q ${queue} -l walltime=${walltime}         -l ncpus=${cpu} -l mem=${memory_mb}mb         -- /usr/bin/env bash ${script}
        """
        kill = "qdel ${job_id}"
        check-alive = "qstat -j ${job_id}"
        job-id-regex = "(\\d+).*"
             filesystems {

        local {
          localization: ["soft-link"]
          caching {
            duplication-strategy: ["soft-link"]
            hashing-strategy: "path"
          }
        }
      }

      }
    }


  }
}
